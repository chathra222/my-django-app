# tests/test_users_views.py
import json
from django.test.client import RequestFactory
from django.http import JsonResponse
from .users.views import add_user, update_user, list_users

def test_add_user_valid():
    factory = RequestFactory()
    request = factory.post('/users/add/', data={username: 'testuser', email: 'test@user.com'})
    response = add_user(request)
    assert response.status_code == 201
    data = json.loads(response.content)
    assert data['message'] == f'User testuser created'
    assert data['email'] == 'test@user.com'

def test_add_user_missing_username():
    factory = RequestFactory()
    request = factory.post('/users/add/', data={email: 'test@user.com'})
    response = add_user(request)
    assert response.status_code == 400
    data = json.loads(response.content)
    assert data['error'] == 'Missing username'

def test_add_user_invalid_json():
    factory = RequestFactory()
    request = factory.post('/users/add/', data='{"invalid":"data"}', content_type='application/json')
    response = add_user(request)
    assert response.status_code == 400
    data = json.loads(response.content)
    assert data['error'] == 'Invalid JSON'

def test_add_user_invalid_method():
    factory = RequestFactory()
    request = factory.get('/users/add/')
    response = add_user(request)
    assert response.status_code == 405
